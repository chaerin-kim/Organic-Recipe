{"ast":null,"code":"var _jsxFileName = \"/Users/chaerinkim/Desktop/HPE/react_study/Blog \\u1106\\u1161\\u11AB\\u1103\\u1173\\u11AF\\u1100\\u1175 2/blog/client/src/components/KakaoLogin.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\n\n// 카카오 로그인\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client_id = 'f65dbab13ce0e288353d738bac59809b'; //appKey\nconst redirect_uri = 'http://localhost:3000';\nconst response_type = 'code';\nconst KakaoLogin = () => {\n  _s();\n  // 백엔드가 있는 경우 : 백엔드에서 카카오 호출 하는 api\n\n  // 카카오로부터 값을 받으면 /code=어쩌고~ 형태로 옴\n  // => 카카오로부터 인가 코드 받은 것으로 판단\n  useEffect(() => {\n    const search = new URLSearchParams(window.location.search);\n    const code = search.get('code');\n    console.log('현재 URL:', window.location.href);\n    console.log('인가 코드:', code);\n    // 카카오로부터 리다이렉트 당한 경우 code 가 있겠지\n    if (code) {\n      handleGetToken(code); // code를 인자로 전달\n    }\n  }, []);\n  const handleGetToken = async code => {\n    console.log('토큰 요청을 처리합니다.', code);\n    try {\n      const response = await fetch(`http://localhost:8001/oauth/kakao/callback?code=${code}`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      if (response.ok) {\n        console.log('카카오 로그인 성공');\n      } else {\n        console.error('카카오 로그인 실패:', response.statusText);\n      }\n    } catch (error) {\n      console.error('카카오 로그인 요청 중 오류 발생:', error);\n    }\n  };\n  const authParam = new URLSearchParams({\n    client_id,\n    redirect_uri,\n    response_type\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"a\", {\n      type: \"button\",\n      href: `https://kauth.kakao.com/oauth/authorize?${authParam.toString()}`,\n      children: \"\\uCE74\\uCE74\\uC624\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(KakaoLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = KakaoLogin;\nexport default KakaoLogin;\nvar _c;\n$RefreshReg$(_c, \"KakaoLogin\");","map":{"version":3,"names":["useEffect","jsxDEV","_jsxDEV","client_id","redirect_uri","response_type","KakaoLogin","_s","search","URLSearchParams","window","location","code","get","console","log","href","handleGetToken","response","fetch","method","credentials","ok","error","statusText","authParam","children","type","toString","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chaerinkim/Desktop/HPE/react_study/Blog 만들기 2/blog/client/src/components/KakaoLogin.jsx"],"sourcesContent":["import { useEffect } from 'react';\n\n// 카카오 로그인\nconst client_id = 'f65dbab13ce0e288353d738bac59809b'; //appKey\nconst redirect_uri = 'http://localhost:3000';\nconst response_type = 'code';\n\nconst KakaoLogin = () => {\n  // 백엔드가 있는 경우 : 백엔드에서 카카오 호출 하는 api\n\n  // 카카오로부터 값을 받으면 /code=어쩌고~ 형태로 옴\n  // => 카카오로부터 인가 코드 받은 것으로 판단\n  useEffect(() => {\n    const search = new URLSearchParams(window.location.search);\n    const code = search.get('code');\n    console.log('현재 URL:', window.location.href);\n    console.log('인가 코드:', code);\n    // 카카오로부터 리다이렉트 당한 경우 code 가 있겠지\n    if (code) {\n      handleGetToken(code); // code를 인자로 전달\n    }\n  }, []);\n\n  const handleGetToken = async (code) => {\n    console.log('토큰 요청을 처리합니다.', code);\n    try {\n      const response = await fetch(`http://localhost:8001/oauth/kakao/callback?code=${code}`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      if (response.ok) {\n        console.log('카카오 로그인 성공');\n      } else {\n        console.error('카카오 로그인 실패:', response.statusText);\n      }\n    } catch (error) {\n      console.error('카카오 로그인 요청 중 오류 발생:', error);\n    }\n  };\n\n  const authParam = new URLSearchParams({\n    client_id,\n    redirect_uri,\n    response_type,\n  });\n\n  return (\n    <div>\n      <a\n        type=\"button\"\n        href={`https://kauth.kakao.com/oauth/authorize?${authParam.toString()}`}\n      >\n        카카오\n      </a>\n    </div>\n  );\n};\n\nexport default KakaoLogin;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG,kCAAkC,CAAC,CAAC;AACtD,MAAMC,YAAY,GAAG,uBAAuB;AAC5C,MAAMC,aAAa,GAAG,MAAM;AAE5B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;;EAEA;EACA;EACAP,SAAS,CAAC,MAAM;IACd,MAAMQ,MAAM,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC;IAC1D,MAAMI,IAAI,GAAGJ,MAAM,CAACK,GAAG,CAAC,MAAM,CAAC;IAC/BC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEL,MAAM,CAACC,QAAQ,CAACK,IAAI,CAAC;IAC5CF,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,IAAI,CAAC;IAC3B;IACA,IAAIA,IAAI,EAAE;MACRK,cAAc,CAACL,IAAI,CAAC,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,cAAc,GAAG,MAAOL,IAAI,IAAK;IACrCE,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,IAAI,CAAC;IAClC,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,mDAAkDP,IAAK,EAAC,EAAE;QACtFQ,MAAM,EAAE,KAAK;QACbC,WAAW,EAAE;MACf,CAAC,CAAC;MACF,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfR,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MAC3B,CAAC,MAAM;QACLD,OAAO,CAACS,KAAK,CAAC,aAAa,EAAEL,QAAQ,CAACM,UAAU,CAAC;MACnD;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,MAAME,SAAS,GAAG,IAAIhB,eAAe,CAAC;IACpCN,SAAS;IACTC,YAAY;IACZC;EACF,CAAC,CAAC;EAEF,oBACEH,OAAA;IAAAwB,QAAA,eACExB,OAAA;MACEyB,IAAI,EAAC,QAAQ;MACbX,IAAI,EAAG,2CAA0CS,SAAS,CAACG,QAAQ,CAAC,CAAE,EAAE;MAAAF,QAAA,EACzE;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACzB,EAAA,CAjDID,UAAU;AAAA2B,EAAA,GAAV3B,UAAU;AAmDhB,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}